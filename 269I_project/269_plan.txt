Current plan for CS 269I project -
1. Analyze the ticketing system based on a single railway
	[Let's say Jinghu-highspeed-railway]

	1.1 Modeling of Ticketing requests
		- Not likely to gain a realistic dataset on people's request of ticket
		- Model 1: Uniformly random intervals
		- Model 2: Interval (x,y) probability proportional to flow(x) * flow(y)
			- flow(x) is the passengers flow of station x; if not available, use the population of that city instead
				(in this case, need to take care of the cases when multiple stations appear in a city. Fine for Jinghu)
		- Model 3: Interval (x,y) probability proportional to flow(x) * flow(y) / dist(x, y)
			- if distance on railway hard to calculate, use geodistance instead. 
				(For Jinghu, could just manually hardcode.)

	We first assume that there's only one train, stopping on all stations along the way, with capacity = N. (Resources model 1)
	Later we will inspect the realistic situation when different trains stop on different sets of stations. (Resources model 2)

	Default algorithm: 
		First-come-first-serve; if multiple trains have remaining seats, the buyer have the right to select any of them.
		(For this project, ignore the absolute time of trains - let's assume that trains at 7am is as popular as those in 1pm. Not a very realistic assumption but in many cases fine - only a small set of people really care about several hours difference in arriving time.)
		Super fair; not necessary efficient. Must give the system some power to make things more efficient.

	Assumptions for the project:
		- Railway tickets are scarce resources compared to requests;
		- Amount of requests are huge, but not extremely huge - if extremely huge, regardless of how we sell our tickets, we can almost make sure that all seats are full at all time.
		- In reality, if there are N seats, assume something like there are 2N requests (on probabily sub-intervals). If you greedly sell tickets, many resources might be wasted; if you do it wisely, most resources could get allocated.
			- This is very close to the realistic situation in China. Probably not in Jinghu-railway in the current days, but is still the case when:
				- During some national holidays, like the National Day Holiday (7 days), the Spring Festival (~20 days)
				- In other railways with lower capacity but large demand (e.g. Beijing->Shenzhen)
				- Whenever we observe some areas with fast development but the construction of infrastructures is kind of left behind, such situation may happen again.
		- If you buy a ticket (x,y), you could only use the *whole interval*. You're not allowed to get on late or get off early (which is allowed in reality). We may discuss this issue if time/space allowed.

	1.2 Power 1 - Allow the system to decline request despite there are seats available (On resources model 1)
		- Intuition: don't want to sell a small interval; want to save for the whole trip Beijing->Shanghai which is very likely to happen later (due to large population in both cities)
		
		1.2.1 Mental behavior
			- Two ways to model people's mental behavior - "Accept-or-reject" request / "Accept-or-defer" request
				- Accept-or-reject means once someone's request's denied, he would figure out other ways of transportation asap, and if we tell him later that there are tickets available, he would NOT care (Reasonable assumption for jinghu-railway; people may fly)
				- Accept-or-defer means once someone's request's denied, he would keep waiting and if there are tickets available, he would immediately buy it (Reasonable assumption for underdeveloped areas - no enough money, but usually no emergency)

		1.2.2 Define evaluation metrics
			- Definition of efficiency: amount of person-milage in total. ("People are not equal.")
			- Definition of fairness: among all declined requests, the percentage of them declined because of no resource available indeed ("People are equal.")

	1.3 Power 2 - Allow the system to set floating price (On resources model 2)
		- Intuition: In resources model 1, we could freely assign seats for passengers, so all we care is "whether accept a request or not". In a more realistic situation, there are multiple trains, and we cannot freely assign trains for passengers. We really want to do that - if someone happens to buy a small interval (x,y) in the middle, while luckily two other guys want to buy (start,x) and (y,terminal), we should give them strong incentives to go for the same train, which makes the whole community better off. Though we should not force you to buy tickets of a specific train, we could change the price.
		- Here are the rules of pricing: 
			- We could either increase or decrease the price of a ticket (or, interval) from its original value.
			- Tickets, or intervals, are independent. For a specific train, no guarantee that the price(x,y)+price(y,z)=price(x,z) any more. However, for a specific train, price(x,y)+price(y,z)>=price(x,z) must hold o/w you could benefit from combining tickets. Don't need to hold such property across different trains. This makes sense because we usually want to encourage long-distance trips.
			- Different trains may have different prices on a same interval. For a specific train, all tickets of a same interval must have the same price at a specific time (but might change as time goes on).

		1.3.1 Mental behavior
			- Model 1:
				- When there are multiple tickets from multiple trains available, assume that people will go for the cheapest one
				- When there are multiple cheapest ones, pick one uniformly at random
				- Not very ideal since we could basically "force" people by a difference of 1 yuan (even 0.01 yuan)
			- Model 2:
				- When there are multiple tickets of different price, the probability of buying a ticket of price p is proportional to e^(-p/min_p)
					
			- Later, we could incorporate the "time cost" of a train. Not a big deal on Jinghu-highspeed, but could be a big deal on other "traditional" railways.
			
		1.3.2. Define evaluation metrics
			- Definition of efficiency: When allowing floating price, amount of money made in total (Notice: when floating price is not allowed, money made in total is proportional to person-milage in total; that's how the current policy works)
			- Definition of fairness: for all tickets sold, 
				- let c = list(prices / original_prices) for all tickets sold
				- fairness = avg(c) / (1 + std(c))
				- fairness = 1 is ideal. But in theory could be better than 1.

2. Extend the result to the whole network